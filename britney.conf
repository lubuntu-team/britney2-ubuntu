# Configuration file for britney

# Paths for control files
TESTING           = data/%(SERIES)
UNSTABLE          = data/%(SERIES)-proposed
PARTIAL_UNSTABLE  = yes

# Output
NONINST_STATUS    = data/%(SERIES)/non-installable-status
EXCUSES_OUTPUT    = output/%(SERIES)/excuses.html
EXCUSES_YAML_OUTPUT = output/%(SERIES)/excuses.yaml.xz
UPGRADE_OUTPUT    = output/%(SERIES)/output.txt
HEIDI_OUTPUT      = output/%(SERIES)/HeidiResult

# External policy/constraints/faux-packages information that
# (presumably) rarely changes.  Examples include "constraints".
STATIC_INPUT_DIR = data/%(SERIES)/input

# Directory for input files that Britney will update herself
# (e.g. aging information) or will need regular updates
# (e.g. urgency information).
STATE_DIR          = data/%(SERIES)/state

# List of architectures that Britney should consider.
# - defaults to the value in testing's Release file (if it is present).
# - Required for the legacy layout.
ARCHITECTURES     = amd64 arm64 armhf i386 powerpc ppc64el riscv64

# if you're not in this list, arch: all packages are allowed to break on you
NOBREAKALL_ARCHES = amd64

# primary architecture used for checking Build-Depends-Indep
ALL_BUILDARCH     = amd64

# is arch-all built separately? i.e. can it fail independently of another arch?
HAS_ARCH_ALL_BUILDDS = no

# if you're in this list, your packages may not stay in sync with the source
OUTOFSYNC_ARCHES  =

# if you're in this list, your uninstallability count may increase
BREAK_ARCHES      =

# if you're in this list, you are a new architecture
NEW_ARCHES        =

# priorities and delays
MINDAYS_LOW       = 0
MINDAYS_MEDIUM    = 0
MINDAYS_HIGH      = 0
MINDAYS_CRITICAL  = 0
MINDAYS_EMERGENCY = 0
DEFAULT_URGENCY   = medium
NO_PENALTIES      = high critical emergency
BOUNTY_MIN_AGE    = 2

HINTSDIR = data/%(SERIES)-proposed/Hints

# hint permissions
HINTS_LANEY        = ALL
HINTS_STEFANOR     = ALL
HINTS_STGRABER     = ALL
HINTS_VORLON       = ALL
HINTS_PITTI        = ALL
HINTS_UBUNTU-RELEASE = ALL
# Kernel team automated testing
HINTS_KERNEL-TESTING = block unblock
# SRU team
HINTS_APW          = ALL
HINTS_ARGES        = ALL
HINTS_BRIAN-MURRAY = ALL
HINTS_RACB         = ALL
HINTS_RAOF         = ALL
HINTS_SIL2100      = ALL
HINTS_TJAALTON     = ALL
HINTS_UBUNTU-SRU   = ALL
HINTS_FREEZE       = block block-all

# support for old libraries in testing (smooth update)
# use ALL to enable smooth updates for all the sections
#
# naming a non-existent section will effectively disable new smooth
# updates but still allow removals to occur
SMOOTH_UPDATES    = badgers

IGNORE_CRUFT      = 0

REMOVE_OBSOLETE   = no

CHECK_BUILDD      = no

ADT_ENABLE        = yes
ADT_ARCHES        = amd64 i386 armhf ppc64el arm64
ADT_AMQP          = amqp://test_request:password@autopkgtest-amqp.internal
# space separate list of PPAs to add for test requests and for polling results;
# the *last* one determines the swift container name
ADT_PPAS          =
# set this to the path of a (r/o) autopkgtest-results.cache for running many parallel
# britney instances for PPAs without updating the cache
ADT_SHARED_RESULTS_CACHE =
# Swift base URL with the results (must be publicly readable and browsable)
# or file location if results are pre-fetched
ADT_SWIFT_URL     = https://autopkgtest.ubuntu.com/results/
# Base URL for autopkgtest site, used for links in the excuses
ADT_CI_URL        = https://autopkgtest.ubuntu.com/
# URL for the autopkgtest database, if used
ADT_DB_URL        = https://autopkgtest.ubuntu.com/static/autopkgtest.db
ADT_HUGE          = 20

# Autopkgtest results can be used to influence the aging
ADT_REGRESSION_PENALTY =
ADT_SUCCESS_BOUNTY     =
ADT_BASELINE           = reference
ADT_RETRY_URL_MECH     =
ADT_RETRY_OLDER_THAN   =
ADT_REFERENCE_MAX_AGE  =

# email uploaders for stuck uploads
EMAIL_ENABLE     = yes
# email SRU bugs when regressions are detected
SRUREGRESSIONEMAIL_ENABLE = no

# we don't run piuparts testing in Ubuntu
PIUPARTS_ENABLE = no
